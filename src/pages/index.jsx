import Head from "next/head";
import { Inter } from "next/font/google";
import { useRef, useState } from "react";
import nookies from "nookies";
import axios from "axios";
import Navbar from "./components/navbar";
import Camera from "./components/camera";
import Loader from "@/components/loader";

const inter = Inter({ subsets: ["latin"] });

export async function getServerSideProps(ctx) {
  const cookies = nookies.get(ctx);
  if (!cookies.token) {
    return {
      redirect: {
        destination: "/login",
      },
    };
  }

  console.log(cookies);
  return {
    props: {},
  };
}

export default function Home() {
  const videoRef = useRef();
  const canvasRef = useRef();
  const [photoUrl, setPhotoUrl] = useState([]);
  const [files, setFiles] = useState();
  const [showModal, setShowModal] = useState(false);
  const [showNotification, setShowNotification] = useState(false);

  const toggleModal = () => {
    setShowModal((prev) => !prev);
  };

  const handleSuccess = (stream) => {
    if (videoRef.current) {
      videoRef.current.srcObject = stream;
    }
  };

  const handleError = (error) => {
    console.log("Error accessing media devices", error);
  };

  const getVideo = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ video: true });
      handleSuccess(stream);
    } catch (error) {
      handleError(error);
    }
  };

  const takePhoto = () => {
    if (canvasRef.current) {
      const context = canvasRef.current.getContext("2d");
      context.canvas.width = videoRef.current.videoWidth;
      context.canvas.height = videoRef.current.videoHeight;
      context.drawImage(
        videoRef.current,
        0,
        0,
        context.canvas.width,
        context.canvas.height
      );
      const dataUrl = canvasRef.current.toDataURL("image/png");
      const arr = [];
      arr.push(dataUrl);
      const base64 = arr[0].split(",");
      const result = baseToFloat(base64[1]);
      setPhotoUrl((prev) => [...prev, ...arr]);
    }
  };

  function dataURItoBlob(dataURI) {
    var byteString;
    if (dataURI.split(",")[0].indexOf("base64") >= 0)
      byteString = atob(dataURI.split(",")[1]);
    else byteString = unescape(dataURI.split(",")[1]);

    var mimeString = dataURI.split(",")[0].split(":")[1].split(";")[0];

    var ia = new Uint8Array(byteString.length);
    for (var i = 0; i < byteString.length; i++) {
      ia[i] = byteString.charCodeAt(i);
    }

    return new Blob([ia], { type: mimeString });
  }

  function baseToFloat(base64String) {
    var base64String = "";
    var binaryString = atob(base64String);

    var arrayBuffer = new ArrayBuffer(binaryString.length);
    var bufferView = new Uint8Array(arrayBuffer);
    for (var i = 0; i < binaryString.length; i++) {
      bufferView[i] = binaryString.charCodeAt(i);
    }

    var float32Array = new Float32Array(arrayBuffer);
    console.log(float32Array);
  }

  const handleUpload = async () => {
    const formData = new FormData();

    for (let i = 0; i < photoUrl.length; i++) {
      const blob = dataURItoBlob(photoUrl[i]);
      formData.append("files", blob, "image.jpg");
      console.log(blob);
    }
    try {
      const res = await axios.post(
        `${process.env.NEXT_PUBLIC_URL}/api/upload`,
        formData
      );
      const imageId = [];
      for (let i = 0; i < photoUrl.length; i++) {
        imageId.push({ id: res.data[i].id });
      }
      console.log(imageId);
      const id = localStorage.getItem("id");
      axios
        .put(`${process.env.NEXT_PUBLIC_URL}/api/users/${id}`, {
          image: imageId,
        })
        .then((res) => {
          console.log("success");
          window.location.reload();
        })
        .catch((err) => {
          console.log("gagal");
        });
      console.log(imageId);
    } catch (err) {
      console.log(err);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (photoUrl.length === 0) {
      setShowNotification(true);
      return;
    }
    toggleModal();
  };

  const confirmUpload = async () => {
    toggleModal();
    await handleUpload();
  };

  const deleteImage = (index) => {
    const tempData = photoUrl;
    tempData.splice(index, 1);
    setPhotoUrl([...tempData]);
  };
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        {/* <Loader /> */}
        <Navbar />
        <Camera />
      </main>
    </>
  );
}
